@page "/auth"
@using System.Text.Json
@using Microsoft.JSInterop
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Auth</PageTitle>

<RadzenText TextStyle="TextStyle.H4">Auth</RadzenText>

<EditForm Model="AuthDto" OnValidSubmit="Submit" class="container-fluid">
    <DataAnnotationsValidator />

    <RadzenStack class="rz-w-max-content" Gap="20px">
        <RadzenStack Gap="4px">
            <RadzenLabel Text="Login" />
            <RadzenTextBox @bind-Value="AuthDto.Login" />
            <ValidationMessage class="rz-color-danger" For="@(() => AuthDto.Login)" />
        </RadzenStack>

        <RadzenStack Gap="4px">
            <RadzenLabel Text="Password" />
            <RadzenPassword @bind-Value="AuthDto.Password" />
            <ValidationMessage class="rz-color-danger" For="@(() => AuthDto.Password)" />
        </RadzenStack>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-danger">@ErrorMessage</RadzenText>
        }

        <RadzenButton type="submit" Disabled="@Disabled">
            @(Disabled ? "Loading..." : "Login")
        </RadzenButton>
    </RadzenStack>

</EditForm>

@code {
    private AuthDto AuthDto = new();
    private bool Disabled;
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
            NavigationManager.NavigateTo("/");
    }

    private async Task Submit()
    {
        Disabled = true;
        ErrorMessage = null;

        try
        {
            var result = await JS.InvokeAsync<JsonElement>(
              "loginFetch",
              "/auth/login",
              JsonSerializer.Serialize(AuthDto)
            );

            bool ok = result.GetProperty("ok").GetBoolean();
            string body = result.GetProperty("text").GetString()!;

            if (ok)
                NavigationManager.NavigateTo("/", forceLoad: true);
            else
                ErrorMessage = body;
        }
        catch (Exception ex)
        {
            ErrorMessage = "Error with login: " + ex.Message;
        }
        finally
        {
            Disabled = false;
        }
    }
}