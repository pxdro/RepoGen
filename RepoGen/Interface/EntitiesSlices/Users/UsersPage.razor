@page "/users"
@using Microsoft.JSInterop
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Users</PageTitle>

<RadzenDataGrid Data="@Users" TItem="User" class="rz-border-radius-2 rz-mb-4"
                AllowVirtualization="true" AllowFiltering="true" AllowSorting="true" Responsive="true" AllowColumnResize="true"
                AllowAlternatingRows="true" AllowMultiColumnSorting="true" ShowMultiColumnSortingIndex="true"
                FilterMode="FilterMode.Simple" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                PagerPosition="PagerPosition.Bottom" Density="Density.Compact"
                IsLoading=@(Users == null || Loading) Sort="@ShowLoading" Page="@ShowLoading" Filter="@ShowLoading"
                EmptyText="@("No users found.")" EnumFilterSelectText="">
    <HeaderTemplate>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenText TextStyle="TextStyle.H5" Text="Usuários" class="rz-me-auto" />
            <RadzenButton Click="@(() => RedirectToForm())" Text="New User" Icon="add_circle" ButtonStyle="ButtonStyle.Success" />
        </RadzenStack>
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Property="Name" Title="Name" />
        <RadzenDataGridColumn Property="Login" Title="Login" />
        <RadzenDataGridColumn Property="Admin" Title="Admin" />
        <RadzenDataGridColumn Property="Permissions" Title="Permissions" FilterProperty="Permission" Type="typeof(IEnumerable<Permission>)" Sortable="false">
            <Template>
                @if (context.Permissions != null)
                {
                    @(string.Join(", ", context.Permissions.Select(p => p.Name)))
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Status" Title="Status" />
        <RadzenDataGridColumn TextAlign="TextAlign.Right" Width="90px" Title="Editar">
            <Template Context="user">
                <RadzenButton Click="@(() => RedirectToForm(user.Id))" Icon="edit" ButtonStyle="ButtonStyle.Warning" />
                <RadzenButton Click="@(() => Delete(user.Id, user.Name))" Icon="delete" ButtonStyle="ButtonStyle.Danger" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<style>
    .rz-custom-header {
        width: 100%;
    }
</style>

@code {
    private IEnumerable<User>? Users;
    bool Loading = false;

    protected override async Task OnInitializedAsync()
    {
        Users = await Mediator.Send(new UsersQuery());
    }

    async Task ShowLoading()
    {
        Loading = true;
        await Task.Yield();
        Loading = false;
    }

    void RedirectToForm(Guid? id = null)
    {
        NavigationManager.NavigateTo($"userform{(id != null ? "/" + id : string.Empty)}");
    }

    async void Delete(Guid? id, string? name)
    {
        if (await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to remove the user {name}?") == true)
        {
            await Mediator.Send(new DeleteUserCommand((Guid)id!));
            NavigationManager.NavigateTo($"users", true);
        }
    }
}