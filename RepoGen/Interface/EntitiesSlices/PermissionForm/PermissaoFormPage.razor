@page "/permissionform"
@page "/permissionform/{id:guid}"
@attribute [Authorize(Roles = "Admin")]

@if (Id == Guid.Empty)
{
    <PageTitle>Add permission</PageTitle>
    <RadzenText TextStyle="TextStyle.H4" Text="Add permission" />
}
else
{
    <PageTitle>Edit permission</PageTitle>
    <RadzenText TextStyle="TextStyle.H4" Text="Edit permission" />
}

<EditForm Model="Permission" OnValidSubmit="@Submit">
    <DataAnnotationsValidator />

    <RadzenRow Gap="2rem">
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenStack Orientation="Orientation.Vertical" Gap="4px">
                <RadzenLabel Text="Name" />
                <RadzenTextBox @bind-Value="Permission.Name" />
                <ValidationMessage class="rz-color-danger" For="@(() => Permission.Name)" />
            </RadzenStack>
        </RadzenColumn>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-danger">@ErrorMessage</RadzenText>
        }
    </RadzenRow>

    <RadzenStack Orientation="Orientation.Horizontal" Gap="4px" class="rz-mt-2">
        <RadzenButton ButtonStyle="ButtonStyle.Success" type="submit" Disabled="@Disabled" Text="@(Id == Guid.Empty ? "Add" : "Update")" />
        <RadzenButton ButtonStyle="ButtonStyle.Danger" Click="() => Cancel()" Disabled="@Disabled" Text="Cancel" />
    </RadzenStack>
</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;

    Permission Permission = new Permission();
    string ErrorMessage = string.Empty;
    bool Disabled = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Id != Guid.Empty)
        {
            Permission = await Mediator.Send(new PermissionQuery(Id));
        }
    }

    protected async Task Submit()
    {
        Disabled = true;

        if (Id != Guid.Empty)
        {
            try
            {
                await Mediator.Send(new UpdatePermissionCommand(Permission.Id, Permission.Name));
                NavigationManager.NavigateTo($"permissions");
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }
        else
        {
            try
            {
                await Mediator.Send(new CreatePermissionCommand(Permission.Name));
                NavigationManager.NavigateTo($"permissions");
            }
            catch (Exception ex)
            {
                ErrorMessage = ex.Message;
            }
        }

        Disabled = false;
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("permissions");
    }
}
